2.1
	1. It takes 7.3 seconds. The code can be seen in SequentialFactorCount.java
	2. The code can be seen in MyAtomicInteger.java
	3. The result is still 18,703,729 and the runtime using ConcurrentFactorCount.java is 3.5 seconds.
	4. No. The method has to be synchronized as the addAndGet operation is atomic.
	5. The consumed time is the same. The AtomicInteger can, but does not have to be declared final
2.2
	1. It is important as it ensures visibility of the OneValueCache object between threads
	2. As the object is already immutable(The values lastNumber and lastFactors can't be changed regardless of it being final or not) it is important because of visibility. The final keyword is not used visibility of the objects values is not ensured between threads.

2.3
	Please see the code implemented in ConcurrentFactorHistogram.java
	1. count should be final as it will never change and because it ensures visibility. increment and getCount needs to be synchronized to ensure visibility and because the increment operation is atomic. getSpan does not have to be synchronized as counts is final.
	3. There is a slight advantage of using AtomicIntegers with a time difference between 100ms and 200ms.
	4. The version using Histogram4 returns a correct result. (diff against check.out).
	5 For Histogram2 I return a clone of the internal array. For Histogram3 and Histogram4 i copy the values into a new int array and return that. All thee provides a snapshot.

2.4
	1. Please see the code implemented in TestCache.java
	2. When Memoizer1 is used Factorizer is called 115000 times and it takes real 18.0s, user 18.3s and sys 0.7s
	3. When Memoizer2 is used Factorizer is called 156047 times and it takes real 13.1s, user 41.8s and sys 0.3s
	4. When Memoizer3 is used Factorizer is called 116280 times and it takes real 11.2s, user 25.2s and sys 1.1s
	5. When Memoizer4 is used Factorizer is called 115000 times and it takes real 11.2s, user 24.9s and sys 1.0s
	6. When Memoizer5 is used Factorizer is called 115000 times and it takes real 11.6s, user 25.0s and sys 1.0s
