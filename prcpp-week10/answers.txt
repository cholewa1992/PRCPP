10.2.[1,3-4] See the code

10.2.2 Yes. The output of my code is the same as shown in the exercise

10.2.5 I have implemented the method follow the (b) pattern.

10.2.6 I have implemented the code so that when all threads are not yet done, the histogram will be transfered to total every 30ms. The result of this is the same as before 

10.2.7 I expect it to stay the same (which I want it too). That is because I getAndClear() from that before getting from this. If it is done in the revered sequence then the result doubles
                counts[j].set( hist.getAndClear(j) + getCount(j) ); //This gives the same result
                counts[j].set( getCount(j) + hist.getAndClear(j) ); //This doubles the result

10.3.1 I have implemented get using the (b) pattern so only getting the node from buckets is done within the transaction.

10.3.2 I have implemented forEach so that only getting the individual node is within the transaction.

10.3.3 In put, putIfAbsent and remove I do most of the operation within the transactions.

10.3.4 I've tried both implementing size by having a cachedSize, and calculating it when needed. It seams that it is much faster when not having the cachedSize, but it really  depends on how often size is called.

10.3.5 If transactions is used, it is likely that the reallocation will never get to commit because other operations will have committed changes to the buckets before the reallocation is committed. The reallocation operation needs to have exclusive access to the buckets while reallocating. We can do this by using a blocking queue. We can introduce the convention that while the transactional boolean is true, all other transactions will retry until it is no longer true. In this way we can block to allow time for the reallocation transaction to finish.

